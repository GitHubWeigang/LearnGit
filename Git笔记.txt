Git 使用笔记(命令记录)
*************************************************
> 建立Git仓库 
	-----> $git init
	-------------------------------------------------------------------
	在一个目录里(尽量为空) 使用命令 git init 就用将这个目录变成Git仓库。
	
> 向仓库中保存文件 
	------> $git add <文件名>
	------> $git commit -m "添加这些文件的备注"
	------------------------------------------------------------------------
	先编写一个文件，此文件最好为utf-8编码，一定要放在仓库的目录或其子目录中
	然后用命令git add <文件名.后缀> 告诉Git，把文件添加到仓库
	第二步,用git commit 告诉Git，把文件提交给仓库
	格式： git commit -m "这几个文件的解释(双引号里面的内容最好是有意义的)"
	执行成功后会告诉你   ... file changed(几个文件被改动)，... insertions(插入了几行内容)
	commit可以一次提交很多文件 会把这个commit之上所有add的文件给提交了
	
> 修改文件
	------> $git status
	------> $git diff
	git status 命令可以让我们时刻掌握当前的状态 可以显示已经修改但尚未准备提交的文件
	git diff 命令告诉我们被修改的文件与原来的不同的地方
	知道了哪个文件被修改了 都修改了什么之后 再提交文件就放心了 
	提交修改和提交新文件是一样的两步。
	如果没有需要提交的修改 使用git status将会有 nothing to commit, working tree clean 的字样

> 版本回退
	-------> $git log
	-------> $git reset --hear HEAD^ 。。
	git log可以显示从最近到最远的提交日志 然后就可以将文件回退到以前的版本
	首先 git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^
	那上上一个版本就是HEAD^^ 如果往上版本数过多 可以写成HEAD~版本数
	这个回退是不管哪个文件的 也就是说 只是将最近的修改给撤回 回退几个版本就是撤回几次修改
	只要命令行窗口没有关闭 你就可以找到刚才被撤回的修改的版本号 就是一长串字母数字的东西
	可以根据这个版本号来再次回到那个版本 
	用 git reset --hear .....  这里的那一长串可以只写前几位 Git会自动找 当然得让它是唯一的
	要是关闭了命令行窗口 没法找到当时的版本号 那就要使用 git reflog 命令 这个命令用来记录每一次命令
	
	** HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

	** 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

	** 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本
> 撤销修改
	-------> $git checkout -- file (千万别忘了 --)
	这个命令可以使这个文件回到最近一次 git commit 或 git add 时的状态
	如果一个文件没有提交 只是用add加入了暂存区 那么可以用 命令 git reset HEAD <file> 来将这个文件放回工作区
	然后就可以再丢弃工作区的修改。。
	
	==================================
	= >场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	= >场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
	  >第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

	= >场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	==================================
	
> 删除文件
	------> $git rm <文件名>
	通常可以在文件管理器中删除文件，也可以使用命令 rm 来删除文件 文件删除以后 git status会告诉你哪些文件被删除了
	现在有两种选择，一是确实要从版本库中删除该文件，那就用命令git rm <文件名> 删掉 并且 git commit 
	另一种情况是删错了，因为版本库中还有呢，所以可以很轻松的把误删的文件恢复到最新版本： git checkout --<文件名>
	